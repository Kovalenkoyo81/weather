1 если город не указан то брать из токена авторизации login и по нему возвращать погоду для города первого в favorites 
готово
2 проработка код ревью
2.0 переписать логику удаления для соответсвию в задании "/favorites/:city" 
готово
2.1 убрать проверку существования пользователя из сервисного слоя  в обработчик .
готово
2.2 userExists возвращает статус в теле ответа, а можно еще рассмотреть возврат статуса 404.
готово
2.3 В папке моделс пару разных файлов, так как погодный сервис не совсем сочетается с бизнес моделями. 
готово
2.4 make file и API токен  через переменные окружения 
готово
3  Потокобезопасность  -мьютексы для операций доступа к данным
готово
4 gracefull shutdown
готово

7 дз из гитхаба Дмитрия
https://github.com/dbzyuzin/swagger/blob/dev/README.md
7.1 сваггер 
сделал
7.2 alerts 
7.3 leveldb
5 логирование 1



 


Низкий приоритет
2. Мидлвари можно делать методами и использовать так же как обработчики кучек. Например было бы rest.еokenAuthMiddleware. 
В таком случае не надо сервис прокидывать отдельно 
7.  Методы сервиса (или все) должны принимать в себя контекст. Это важно для GetCurrentWeather особенно, 
потому что он ходит в другой сервис. Получается если погодный API будет отвечать тебе 20 минут, 
то ты и сам уснешь и своего пользователя повесишь. Пока достаточно прокидывать c (контекст) из самого запроса
9.Ошибки которые могут захотеть проверить выше заводим как глобальные переменные. 
6. конфиг в TOML 